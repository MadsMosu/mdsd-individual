/*
 * generated by Xtext 2.17.0
 */
package dk.sdu.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mdsd.arduinoDSL.Attribute
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mdsd.arduinoDSL.ArduinoDSLPackage.Literals
import org.eclipse.xtext.EcoreUtil2
import dk.sdu.mdsd.arduinoDSL.Node
import org.eclipse.xtext.scoping.IScope
import dk.sdu.mdsd.arduinoDSL.RuleBody
import dk.sdu.mdsd.arduinoDSL.IfStatement
import dk.sdu.mdsd.arduinoDSL.ElseIfStatement
import dk.sdu.mdsd.arduinoDSL.ElseStatement
import dk.sdu.mdsd.arduinoDSL.VariableDeclaration
import dk.sdu.mdsd.arduinoDSL.VarRef
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.impl.SimpleScope
import java.util.ArrayList

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ArduinoDSLScopeProvider extends AbstractArduinoDSLScopeProvider {

	
	override getScope(EObject context, EReference reference) {
	    // We want to define the Scope for the Element's superElement cross-reference
	    if (context instanceof Attribute && reference == Literals.ATTRIBUTE__COMPONENT) {
	        val rootElement = EcoreUtil2.getRootContainer(context)
	        
	        val nodeName = (context as Attribute).name.name
	        val allNodes = EcoreUtil2.getAllContentsOfType(rootElement, Node)
	        	        
	        for (node : allNodes) {
	        	if(node.name == nodeName){
	        		return Scopes.scopeFor(node.components)
	        	}
	        }
	    }
		if(reference == Literals.VAR_REF__REF) {
			return scopeForVariable(context)
		}
	    return super.getScope(context, reference);
	}
	
	
	def protected IScope scopeForVariable(EObject context) {
		val container = context.eContainer
		return switch(container) {
			IfStatement: Scopes.scopeFor(
				container.statements.filter(VariableDeclaration),
				scopeForVariable(container)
			)
			ElseIfStatement: Scopes.scopeFor(
				container.statements.filter(VariableDeclaration),
				scopeForVariable(container.eContainer)
			)
			ElseStatement: Scopes.scopeFor(
				container.statements.filter(VariableDeclaration),
				scopeForVariable(container.eContainer)
			)
			RuleBody: Scopes.scopeFor(
				container.statements.filter(VariableDeclaration)
			)
			default: scopeForVariable(container)
		}
	}
}
