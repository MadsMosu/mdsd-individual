grammar dk.sdu.mdsd.ArduinoDSL with org.eclipse.xtext.common.Terminals

generate arduinoDSL "http://www.sdu.dk/mdsd/ArduinoDSL"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Program: program+= (Rule | NodeDefinition)*;

Rule:
    type=('when' | 'once') condition=BooleanExpression '{' body=RuleBody '}'
;


NumberExpression: PlusMinus;

BooleanExpression: AndOr;

AndOr returns BooleanExpression:
	BooleanEval 
	({AndOr.left=current} operator=BooleanOperator right=BooleanEval)* 
;


BooleanEval returns BooleanExpression:
	(=> Comparison) | BooleanExpressionBlock
;

Comparison returns BooleanExpression:
	{Comparison} left=NumberExpression operator=CompareOperator right=NumberExpression
;

BooleanExpressionBlock:
	'(' block=BooleanExpression ')'
;

BooleanOperator:
	{And} '&&' 
	|{Or} '||'
;

CompareOperator:
	{Equals} '==' 
 	| {NotEquals} '!=' 
 	| {GreaterThanEquals} '>=' 
 	| {Greater} '>' 
 	| {SmallerThanEquals} '<=' 
 	| {Smaller} '<'
; 



PlusMinus returns NumberExpression:
    Factor
    (({Plus.left =current} '+' right=Factor) |
 	({Minus.left=current} '-' right=Factor)
 	)* 
;

Factor returns NumberExpression:
	Exp
	(({Mult.left=current} '*' right=Exp) |
 	({Div.left=current} '/' right=Exp) | 
 	({Mod.left=current} '%' right=Exp)
 	)*
;

Exp returns NumberExpression:
	Value | NumberExpressionBlock 
;

NumberExpressionBlock:
	'(' block=NumberExpression ')'
;




Value:
	NumberLiteral | Attribute | Delta | VariableReference
;

Attribute:
    name=[Node]  component=[Component]
;

Delta:
    attr=Attribute 'delta'
;

BooleanLiteral: 
	value=BOOLEAN
;


NumberLiteral:
	floatVal=DECIMAL | intVal=INT
;

terminal DECIMAL: INT '.' INT;

BOOLEAN returns ecore::EBoolean: 'true' | 'false';

NUMBER returns ecore::EFloat: INT ('.' INT)?;

State:
    value=('on' | 'off')
;


RuleBody:
    statements+= SimpleStatement+
;

SimpleStatement:
	If | VariableDeclaration | VariableReference | Assignment
;


Assignment:
    attribute=Attribute "=" value=(PlusMinus | State)
;


If returns SimpleStatement:
	{IfStatement} 
	'if' condition=BooleanExpression '{' 
		statements+=SimpleStatement+ 
	'}'
	(elseif=ElseIf | else=Else)?
;

ElseIf returns SimpleStatement:
	{ElseIfStatement} 
	'else' 'if' condition=BooleanExpression '{' 
		statements+=SimpleStatement+  
	'}'
	(elseif=ElseIf | else=Else)?
;

Else returns SimpleStatement:
	{ElseStatement} 
	'else' '{' 
		statements+=SimpleStatement+ 
	'}'
;


terminal VARIABLE_TYPE:
	'int' | 'double' | 'long' | 'float' | 'bool'
;

VariableDeclaration:
	type=VARIABLE_TYPE name=ID '=' cast=Cast? value=(BooleanLiteral | Value)
;

VariableReference:
	{VarRef} ref=[VariableDeclaration] ('=' cast=Cast? value=(BooleanLiteral | Value))?
;

Cast:
	'(' castType=VARIABLE_TYPE ')' 
;

terminal BOARDS:
	'UNO' 
;

NodeDefinition:
	board=Board node=Node
;

Board:
	'@board' '(' b=BOARDS ')'
;

Node:
    name=ID '{' components+=Component+ '}'
;

Component:
    name=ID properties=ComponentBody
;

ComponentBody:
    io=IO type=TYPE 'pin' pin=INT rate=Rate? map=Map? smoothing=Smoothing?
;

terminal IO:
    'input' | 'output'
;

terminal TYPE:
    'analog' | 'digital'
;

Map:
    'map' in=Range '=>' out=Range
;

Range:
    low=NUMBER ':' high=NUMBER
;

Rate:
    'rate' value=INT
;

Smoothing:
    'smoothing' value=NUMBER
;